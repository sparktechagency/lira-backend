// ecosystem.config.js
module.exports = {
  apps: [
    {
      // PM2-তে আপনার অ্যাপ্লিকেশনের নাম। এটি দিয়ে আপনি অ্যাপটি কন্ট্রোল করবেন।
      name: 'jonowoods-backend',

      // আপনার বিল্ড হওয়া মূল সার্ভার ফাইলটির পাথ।
      // `npm run build` কমান্ড চালানোর পর tsc এই ফাইলটি তৈরি করে।
      script: 'dist/server.js',

      // এই অপশনটি আপনার সার্ভারের পারফরম্যান্স বহুগুণ বাড়িয়ে দেবে।
      // 'max' মানে হলো আপনার সার্ভারের যতগুলো CPU কোর আছে, সবগুলো ব্যবহার করে অ্যাপটি চালানো হবে।
      instances: 'max',

      // 'cluster' মোড Node.js-এর বিল্ট-ইন 'cluster' মডিউল ব্যবহার করে,
      // যা একাধিক প্রসেসের মধ্যে নেটওয়ার্ক লোড ব্যালেন্স করে।
      exec_mode: 'cluster',

      // অ্যাপ্লিকেশনটি কোনো কারণে ক্র্যাশ করলে স্বয়ংক্রিয়ভাবে রিস্টার্ট হবে কিনা।
      // প্রোডাকশনের জন্য এটি 'true' রাখা খুবই জরুরি।
      autorestart: true,

      // প্রোডাকশনে ফাইল পরিবর্তনের সাথে সাথে অ্যাপ রিস্টার্ট করা উচিত নয়।
      // নতুন কোড ডেপ্লয় করার জন্য CI/CD পাইপলাইন ব্যবহার করা হয়। তাই এটি 'false' থাকবে।
      watch: false,

      // আপনার অ্যাপ্লিকেশনটি সর্বোচ্চ কতটুকু মেমোরি ব্যবহার করতে পারবে তা নির্ধারণ করে।
      // যদি এর চেয়ে বেশি মেমোরি ব্যবহার করে, PM2 স্বয়ংক্রিয়ভাবে অ্যাপটি রিস্টার্ট করবে।
      // এটি মেমোরি লিক (memory leak) সমস্যা থেকে বাঁচাতে সাহায্য করে।
      max_memory_restart: '1G', // উদাহরণস্বরূপ ১ গিগাবাইট

      // প্রোডাকশন এনভায়রনমেন্টের জন্য ভেরিয়েবল সেট করা।
      // আপনার CI/CD পাইপলাইনে pm2 startOrReload ecosystem.config.js --env production কমান্ডটি ব্যবহার করবেন।
      env_production: {
        NODE_ENV: 'production',
        // এখানে অন্যান্য প্রোডাকশন-স্পেসিফিক ভেরিয়েবলও যোগ করতে পারেন,
        // তবে ডাটাবেজ পাসওয়ার্ডের মতো গোপন তথ্য GitHub Secrets থেকে দেওয়াই সবচেয়ে নিরাপদ।
      },
    },
  ],
};